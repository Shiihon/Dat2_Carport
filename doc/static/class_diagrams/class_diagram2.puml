@startuml
'https://plantuml.com/class-diagram
!pragma layout smetana
set separator none

class Main {
    + {static} void main(String[] args)
}

class AccountController {
    + {static} void addRoutes(Javalin app, AccountValidator connectionPool)
    - {static} void createAccount(Context ctx, AccountValidator connectionPool)
    - {static} void login(Context ctx, AccountValidator connectionPool)
    - {static} void logout(Context ctx)
}

class SalesController {
    + {static} void addRoutes(Javalin app, AccountValidator connectionPool)
    - {static} void viewRequests(Context ctx, AccountValidator connectionPool)
    - {static} void approveReview(Context ctx, AccountValidator connectionPool)
    - {static} void updatePrice(Context ctx, AccountValidator connectionPool)
    - {static} void viewCostumersOrders(Context ctx, AccountValidator connectionPool)
    - {static} void viewCarportSchematic(Context ctx)
    - {static} void viewOrderDetails(Context ctx, AccountValidator connectionPool)
}

class OrderController {
    + {static} void addRoutes(Javalin app, AccountValidator connectionPool)
    - {static} void continueRequest(Context ctx, AccountValidator connectionPool)
    - {static} void sendOrderRequest(Context ctx, AccountValidator connectionPool)
    - {static} double calculateOrderBillPrice(List<OrderBillItem> orderBillItemList)
    - {static} void viewMyOrders(Context ctx, AccountValidator connectionPool)
    - {static} void payOrder(Context ctx, AccountValidator connectionPool)
    - {static} void viewInvoice(Context ctx, AccountValidator connectionPool)
    - {static} void cancelOrder(Context ctx, AccountValidator connectionPool)
    - {static} void viewCarportSchematic(Context ctx)
}

class WarehouseController {
    + {static} void addRoutes(Javalin app, AccountValidator connectionPool)
    - {static} void viewWarehouse(Context ctx, AccountValidator connectionPool)
    - {static} void addNewMaterial(Context ctx, AccountValidator connectionPool)
}

class AccountMapper {
    + {static} Account login(String email, String password, AccountValidator connectionPool)
    + {static} void createAccount(Account account, AccountValidator connectionPool)
    + {static} Account getAccountById(int accountId, AccountValidator connectionPool)
    - {static} Account getAccount(int accountId, String email, String password, ResultSet rs)
}

class OrderMapper {
    + {static} List<Order> getAllOrders(ConnectionPool connectionPool)
    + {static} List<Order> getAllOrdersByStatus(Order.OrderStatus status, AccountValidator connectionPool)
    + {static} List<Order> getAllOrdersByStatus(List<Order.OrderStatus> statusList, AccountValidator connectionPool)
    + {static} List<OrderBillItem> getOrderBillItems(int orderId, Connection connection)
    + {static} List<Order> getAllCustomerOrders(int customerId, AccountValidator connectionPool)
    + {static} void createOrder(Order order, AccountValidator connectionPool)
    + {static} void createOrderBill(int orderId, List<OrderBillItem> orderBillItems, AccountValidator connectionPool)
    + {static} void setOrderStatus(int orderId, Order.OrderStatus status, AccountValidator connectionPool)
    + {static} void setOrderPrice(int orderId, int price, AccountValidator connectionPool)
    + {static} Order getOrderById(int orderId, AccountValidator connectionPool)
    + {static} void createOrderInvoice(int orderId, Invoice invoice, AccountValidator connectionPool)
    + {static} Invoice getOrderInvoice(int orderId, AccountValidator connectionPool)
}

class MaterialMapper {
    + {static} Material getMaterial(String description, AccountValidator connectionPool)
    + {static} List<Material> getAllMaterials(String description, AccountValidator connectionPool)
    + {static} List<Material> getAllMaterials(ConnectionPool connectionPool)
    + {static} Material getMaterialById(int materialVariantId, AccountValidator connectionPool)
    + {static} void createMaterial(Material material, AccountValidator connectionPool)
    + {static} void createMaterialVariant(Material material, AccountValidator connectionPool)
    + {static} void getAllMaterialsFromResultSet(List<Material> materialList, PreparedStatement ps)
    + {static} Material getMaterialFromResultSet(ResultSet rs)
}

class PostalCodeMapper {
    + {static} PostalCode getPostalCodeByZip(int zip, AccountValidator connectionPool)
}

class AccountValidator {
    + {static} String validateFullName(String fullName)
    + {static} String validateAddress(String address)
    + {static} int validateZip(String zipStr)
    + {static} String validatePhoneNumber(String phoneNumber)
    + {static} String validateEmail(String email)
    + {static} String validatePhoneNumber(String password)
    + {static} String validatePassword(String password1, String password2)
}

class AccountValidationException {
    + AccountValidationException(String message)
}

class CarportSvg {
    - {static} final int postDistanceFromSide
    - {static} final double postDistanceFromFront
    - {static} final double postDistanceFromBack
    - {static} final double maxPostDistance
    - {static} final double postSize
    - {static} final double maxRafterDistance
    - {static} final double rafterWidth
    - {static} final double beamWidth
    - {static} final int frameSize

    - final int frameWidth;
    - final int frameHeight;
    - final int carportSchematicWidth;
    - final int carportSchematicHeight;
    - Svg carportSvg;

    - void createSchematicFrame()
    - void createInnerCarportSchematic()
    - void addPosts(Svg svg)
    - void addBeams(Svg svg)
    - void addRafters(Svg svg)
}

interface Account {
    + int getId()
    + void setId(int id)
    + String getEmail()
    + String getPassword()
    + String getRole()
}

class Seller implements Account {
    - int sellerId
    - String email
    - String password
    - String role

    + int getId()
    + void setId()
    + String getEmail()
    + String getPassword()
    + String getRole()
    + boolean equals(Object o)
    + int hashCode()
    + String toString()
}

class Customer implements Account {
    - int customerId
    - String email
    - String password
    - String role
    - String firstName
    - String lastName
    - String address
    - int zip
    - String city
    - String phoneNumber

    + int getId()
    + void setId()
    + String getEmail()
    + String getPassword()
    + String getRole()
    + String getFirstName()
    + String getLastName()
    + String getAddress()
    + int getZip()
    + String getCity()
    + String getPhoneNumber()
    + boolean equals(Object o)
    + int hashCode()
    + String toString()
}

class OrderBillGenerator {
    - {static} final double postDistanceFromFront
    - {static} final double postDistanceFromBack
    - {static} final double maxPostDistance
    - {static} final double maxRafterDistance
    - {static} final double rafterWidth

    + {static} List<OrderBillItem> generateOrderBill(int width, int length, AccountValidator connectionPool)
    - {static} OrderBillItem calculatePosts(int length, AccountValidator connectionPool)
    + {static} int calculatePostsQuantity(int length)
    - {static} List<OrderBillItem> calculateBeams(int length, AccountValidator connectionPool)
    + {static} List<Double> calculateBeamLengths(int length)
    - {static} OrderBillItem calculateRafters(int width, int length, AccountValidator connectionPool)
    + {static} int calculateRaftersQuantity(int length)
    + {static} Material getBestMaterialMatch(List<Material> materials, double length)
}

class Svg {
    - {static} final String SVG_TEMPLATE
    - {static} final String SVG_ARROW_DEFS
    - {static} final String SVG_RECT_TEMPLATE
    - {static} final String SVG_LINE_TEMPLATE
    - {static} final String SVG_TEXT_TEMPLATE
    - final StringBuilder svg

    + void addRectangle(double x, double y, double width, double height, String style)
    + void addLine(double x1, double y1, double x2, double y2, String style)
    + void addText(double x, double y, double rotation, String text)
    + void addSvg(Svg innerSvg)
}

class Order {
    - int orderId
    - int accountId
    - String title
    - int carportWidth;
    - int carportLength;
    - Order.Status status
    - Integer totalPrice
    - List<OrderBillItem> orderBill
    - LocalDateTime timestamp

    + int getOrderId()
    + int getAccountId()
    + String getTitle()
    + int getCarportWidth()
    + int getCarportLength()
    + OrderStatus getStatus()
    + void setStatus(OrderStatus status)
    + Integer getTotalPrice()
    + void setTotalPrice(double newPrice)
    + List<OrderBillItem> getOrderBill()
    + LocalDateTime getTimestamp()
    + void setOrderId(int orderId)
    + boolean equals(Object o)
    + int hashCode()
    + String toString()
}

enum Order.Status {
    WAITING_FOR_REVIEW
    REVIEW_APPROVED
    PAID
}

class OrderBillItem {
    - Material material
    - String description
    - int quantity

    + Material getMaterial()
    + String getDescription()
    + int getQuantity()
    + double getItemPrice()
    + boolean equals(Object o)
    + int hashCode()
    + String toString()
}

class Invoice {
    - int invoiceId
    - int orderId
    - int accountId
    - LocalDate date

    + int getInvoiceId()
    + int getOrderId()
    + int getAccountId()
    + LocalDate getLocalDate()
    + String toString()
}

class PostalCode {
    - int zip
    - String city

    + int getZip()
    + String getCity()
    + boolean equals(Object o)
    + int hashCode()
    + String toString()
}

class Material {
    - int materialId
    - int materialVariantId
    - String description
    - String unit
    - int price
    - Integer length
    - Material.Type

    + int getMaterialId()
    + getMaterialVariantId()
    + String getDescription()
    + String getUnit()
    + int getPrice()
    + Integer getLength()
    + Material.Type getType()
    + boolean equals(Object o)
    + int hashCode()
    + String toString()
}

enum Material.Type {
    WOOD
    SCREWS
}

Main *-- AccountController
Main *-- OrderController
Main *-- SalesController
Main *-- WarehouseController

AccountController *-- AccountMapper
OrderController *-- OrderMapper
SalesController *-- OrderMapper
WarehouseController *-- MaterialMapper

AccountController *-- PostalCodeMapper
AccountController *-- AccountValidator
OrderController *-- CarportSvg
OrderController *-- OrderBillGenerator
OrderController *-- Customer

AccountValidator *-- AccountValidationException

AccountMapper *-- Account
OrderMapper *-- Order
OrderMapper *-- Invoice
MaterialMapper *-- Material

PostalCodeMapper *-- PostalCode
Order *-- OrderBillItem
Order +-- Order.Status

Material +-- Material.Type

CarportSvg *-- Svg

@enduml